---
- name: Stop etcd-member service on all etcd nodes
  become: yes
  service: name=etcd-member state=stopped

- name: Get local backup files list
  become: yes
  find:
    path: "{{ etcd_backup_local_root_dir }}"
    patterns: '*.tgz'
  register: local_backup_files

- name: Abort if no local etcd backups are found
  fail:
    msg: "No local etcd backup files found in {{ etcd_backup_local_root_dir }}"
  when: local_backup_files.files | length == 0

- name: Set etcd_backup_latest_file fact
  set_fact:
    etcd_backup_latest_file: "{{ local_backup_files.files | sort(attribute='mtime', reverse=true) | map(attribute='path') | first }}"

- name: Abort if etcd_backup_latest_file is not the same across all etcd nodes
  fail:
    msg: "etcd_backup_latest_file is not the same across all etcd nodes"
  when: (ansible_play_hosts | map('extract', hostvars, 'etcd_backup_latest_file') | list | unique | length) != 1
  run_once: true

- name: Check available disk space for etcd restore
  shell: df --output=avail -k {{ etcd_data_dir }} | tail -n 1
  register: local_avail_disk_space

- name: Check the uncompressed size of etcd backup
  become: yes
  shell: tar tzvf {{ etcd_backup_latest_file }} | awk '{s+=$3} END{print (s/1024)}'
  register: etcd_backup_uncompressed_size

- name: Abort if insufficient disk space for etcd restore
  fail:
    msg: >
      {{ etcd_backup_uncompressed_size.stdout | int * 3 }} KB disk space required for etcd restore, but
      {{ local_avail_disk_space.stdout }} KB available.
  when: (etcd_backup_uncompressed_size.stdout | int * 3) > (local_avail_disk_space.stdout | int)

- name: Unarchive the latest etcd backup file {{ etcd_backup_latest_file }} on each ectd node
  become: yes
  unarchive:
    src: "{{ etcd_backup_latest_file }}"
    dest: "{{ etcd_backup_local_root_dir }}"
    remote_src: yes

- name: Set etcd_backup_latest_dir fact
  set_fact:
    etcd_backup_latest_dir: "{{ etcd_backup_latest_file.split('.')[0] }}"

- name: Copy etcd v3 restore service file /etc/systemd/system/etcd-restore.service to all etcd nodes
  become: yes
  template: src=etcd-restore.service.j2 dest=/etc/systemd/system/etcd-restore.service

- name: Enable and Start etcd v3 restore service on all etcd nodes
  become: yes
  service: name=etcd-restore.service enabled=yes daemon_reload=yes state=started

- name: Delete no longer needed unarchived backup directory {{ etcd_backup_latest_dir }}
  become: yes
  file:
    path: "{{ etcd_backup_latest_dir }}"
    state: absent

- name: Stop and Disable etcd v3 restore service on all etcd nodes
  become: yes
  service: name=etcd-restore.service enabled=no daemon_reload=yes state=stopped

- name: Delete no longer needed etcd v3 restore service file /etc/systemd/system/etcd-restore.service on all etcd nodes
  become: yes
  file:
    path: /etc/systemd/system/etcd-restore.service
    state: absent

- name: Start etcd-member service on all etcd nodes
  become: yes
  service: name=etcd-member state=started

- name: Get rkt pod list
  command: rkt list --format=json
  register: rktlist

- name: Get etcd pod(s)
  set_fact: etcd_pods="{{ rktlist.stdout | from_json | json_query(etcd_pods_query) }}"
  vars:
    etcd_pods_query: "[?state=='running' && contains(app_names, 'etcd')].name"

- name: Abort if a single etcd rkt pod is not running
  fail:
    msg: "Failed finding a single running etcd pod"
  when: (etcd_pods | length) != 1

- name: Set etcd_pod_id fact
  set_fact:
    etcd_pod_id: "{{ etcd_pods[0] }}"

- name: Set etcdctl_cmd_v2 fact
  set_fact:
    etcdctl_cmd_v2: "{{ 'rkt enter ' + etcd_pod_id + ' /usr/local/bin/etcdctl' }}"

- name: Pause for 30 seconds to allow etcd cluster to fully come up after the restore
  pause:
    seconds: 30

- name: Check etcd cluster health after the restore
  become: yes
  command: "{{ etcdctl_cmd_v2 }} cluster-health"
